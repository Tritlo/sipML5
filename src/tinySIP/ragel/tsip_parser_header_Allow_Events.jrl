/*
* Copyright (C) 2012 Doubango Telecom <http://www.doubango.org>
*
* Contact: Mamadou Diop <diopmamadou(at)doubango[dot]org>
*	
* This file is part of Open Source sipML5 solution <http://www.sipml5.org>
*
* sipML5 is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as publishd by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*	
* sipML5 is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*	
* You should have received a copy of the GNU General Public License
* along with sipML5.
*/
%%{
	machine tsip_machine_parser_header_Allow_events;

	# Includes
	include tsip_machine_utils "./tsip_machine_utils.jrl";
	
	action tag{
		i_tag_start = p;
	}

	action parse_event{
	    tsk_ragel_parser_add_string(s_str, p, i_tag_start, hdr_allow_events.as_events);
	}

	action eob{
	}
	
	event_package = token_nodot;
	event_template = token_nodot;
	event_type = event_package ( "." event_template )*;

	Allow_Events = ( "Allow-Events"i | "u"i ) HCOLON event_type>tag %parse_event ( COMMA event_type>tag %parse_event )*;
	
	# Entry point
	main := Allow_Events :>CRLF @eob;

}%%


%%write data;

function tsip_header_Allow_Events(){
	this.__proto__.__proto__ = new tsip_header(tsip_header_type_e.Allow_Events);
    this.as_events = new Array();
	this.toString = function(){
        var s_str = null;
        for(var i = 0; i < this.as_events.length; ++i){
            if(i == 0){
                s_str = this.as_events[i];
            }
            else{
                s_str += tsk_string_format(",{0}", this.as_events[i]);
            }
        }
        return s_str;
    }
}

tsip_header_Allow_Events.prototype.Parse = function(s_str){
    var cs = 0;
	var p = 0;
	var pe = s_str.length;
	var eof = pe;
	var data = tsk_buff_str2ib(s_str);
	var i_tag_start;	
	var hdr_allow_events = new tsip_header_Allow_Events();
	
	%%write init;
	%%write exec;
	
	if( cs < %%{ write first_final; }%% ){
		console.error("Failed to parse 'Allow-Events' header: %s", s_str);
		return null;
	}
	
	return hdr_allow_events;
}