/*
* Copyright (C) 2012 Doubango Telecom <http://www.doubango.org>
*
* Contact: Mamadou Diop <diopmamadou(at)doubango[dot]org>
*	
* This file is part of Open Source sipML5 solution <http://www.sipml5.org>
*
* sipML5 is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as publishd by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*	
* sipML5 is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*	
* You should have received a copy of the GNU General Public License
* along with sipML5.
*/
%%{
	machine tsip_machine_parser_header_To;

	# Includes
	include tsip_machine_utils "./tsip_machine_utils.jrl";
	
	action tag{
		i_tag_start = p;
	}
	
	action parse_uri{
		if(!hdr_To.o_uri){
		    var s_uri = tsk_ragel_parser_get_string(s_str, p, i_tag_start);
			if((hdr_To.o_uri = tsip_uri.prototype.Parse(s_uri)) && hdr_To.s_display_name){
				hdr_To.o_uri.s_display_name = tsk_strdup(hdr_To.s_display_name);
			}
		}
	}

	action parse_display_name{
		hdr_To.s_display_name = tsk_ragel_parser_get_string(s_str, p, i_tag_start);
        hdr_To.s_display_name = tsk_string_unquote_2(hdr_To.s_display_name);
	}

	action parse_tag{
		hdr_To.s_tag = tsk_ragel_parser_get_string(s_str, p, i_tag_start);
	}

	action parse_param{
		tsk_ragel_add_param(s_str, p, i_tag_start, hdr_To.ao_params);
	}

	action eob{
	}
	
	my_tag_param = "tag"i EQUAL token>tag %parse_tag;
	to_param = my_tag_param@1 | (generic_param)@0 >tag %parse_param;
	
	URI = (scheme HCOLON js_any+)>tag %parse_uri;
	display_name = (( token LWS )+ | quoted_string)>tag %parse_display_name;
	my_name_addr = display_name? :>LAQUOT<: URI :>RAQUOT;

	To = ( "To"i | "t"i ) HCOLON ( my_name_addr | URI ) ( SEMI to_param )*;
	
	# Entry point
	main := To :>CRLF @eob;

}%%




%%write data;

function tsip_header_To(s_display_name, o_uri, s_tag){
    this.__proto__.__proto__ = new tsip_header(tsip_header_type_e.To);
    this.s_display_name = tsk_strdup(s_display_name);
	this.o_uri = o_uri;
	this.s_tag = tsk_strdup(s_tag);
    this.toString = function(){
        var s_str = tsip_uri_tostring(this.o_uri, true, true);
        if(s_str && this.s_tag){
            s_str += tsk_string_format(";tag={0}", this.s_tag);
        }
        return s_str;
    }
}

tsip_header_To.prototype.Parse = function(s_str){
    var cs = 0;
	var p = 0;
	var pe = s_str.length;
	var eof = pe;
	var data = tsk_buff_str2ib(s_str);
	var i_tag_start;	
	var hdr_To = new tsip_header_To(null, null, null);
	
	%%write init;
	%%write exec;
	
	if( cs < %%{ write first_final; }%% ){
		console.error("Failed to parse 'To' header: %s", s_str);
		return null;
	}
	
	return hdr_To;
}