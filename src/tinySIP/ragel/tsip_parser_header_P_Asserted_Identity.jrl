/*
* Copyright (C) 2012 Doubango Telecom <http://www.doubango.org>
*
* Contact: Mamadou Diop <diopmamadou(at)doubango[dot]org>
*	
* This file is part of Open Source sipML5 solution <http://www.sipml5.org>
*
* sipML5 is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as publishd by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*	
* sipML5 is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*	
* You should have received a copy of the GNU General Public License
* along with sipML5.
*/
%%{
	machine tsip_machine_parser_header_P_Asserted_Identity;

	# Includes
	include tsip_machine_utils "./tsip_machine_utils.jrl";
	
	action tag{
		i_tag_start = p;
	}
	
	action create_p_asserted_identity{
		if(!curr_p_asserted_identity){
			curr_p_asserted_identity = new tsip_header_P_Asserted_Identity(null);
		}
	}

	action parse_display_name{
	    if(curr_p_asserted_identity){			
			curr_p_asserted_identity.s_display_name = tsk_ragel_parser_get_string(s_str, p, i_tag_start);
            curr_p_asserted_identity.s_display_name = tsk_string_unquote_2(curr_p_asserted_identity.s_display_name);
		}
	}

	action parse_uri{
		if(curr_p_asserted_identity && !curr_p_asserted_identity.o_uri){
		    var s_uri = tsk_ragel_parser_get_string(s_str, p, i_tag_start);
			if((curr_p_asserted_identity.o_uri = tsip_uri.prototype.Parse(s_uri)) && curr_p_asserted_identity.s_display_name){
				curr_p_asserted_identity.o_uri.s_display_name = tsk_strdup(curr_p_asserted_identity.s_display_name);
			}
		}
	}

	action add_p_asserted_identity{
		if(curr_p_asserted_identity){
	        hdr_p_asserted_identities.push(curr_p_asserted_identity);
	        curr_p_asserted_identity = null;
	    }
	}

	action eob{
	}

	
	URI = (scheme HCOLON js_any+)>tag %parse_uri;
	display_name = (( token LWS )+ | quoted_string)>tag %parse_display_name;
	my_name_addr = display_name? :>LAQUOT<: URI :>RAQUOT;
	
	PAssertedID_value = (my_name_addr | URI) >create_p_asserted_identity %add_p_asserted_identity;
	PAssertedID = "P-Asserted-Identity"i HCOLON PAssertedID_value ( COMMA PAssertedID_value )*;
	P_Asserted_Identity = PAssertedID;

	# Entry point
	main := P_Asserted_Identity :>CRLF @eob;

}%%

%%write data;

function tsip_header_P_Asserted_Identity(o_uri){
    this.__proto__.__proto__ = new tsip_header(tsip_header_type_e.P_Asserted_Identity);
    this.s_display_name = null;
    this.o_uri = o_uri;
    this.toString = function(){
        if(this.o_uri){
            return tsip_uri_tostring(this.o_uri, true, true);
        }
        return null;
    }
}

// returns an array of 'P-Asserted-Identity' headers
tsip_header_P_Asserted_Identity.prototype.Parse = function(s_str){
    var cs = 0;
	var p = 0;
	var pe = s_str.length;
	var eof = pe;
	var data = tsk_buff_str2ib(s_str);
	var i_tag_start;
	var hdr_p_asserted_identities = new Array();
	var curr_p_asserted_identity = null;
	
	%%write init;
	%%write exec;
	
	if( cs < %%{ write first_final; }%% ){
		console.error("Failed to parse 'P-Asserted-Identity' header: %s", s_str);
		return null;
	}
	
	return hdr_p_asserted_identities;
}